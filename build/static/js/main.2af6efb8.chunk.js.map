{"version":3,"sources":["components/InputField.js","components/SelectField.js","components/ButtonSubmit.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["InputField","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","amount","handleInput","bind","assertThisInitialized","e","setState","target","value","getAmount","react_default","a","createElement","type","inputType","min","minVal","max","maxVal","defaultValue","onChange","Component","SelectField","selectedOption","handleSelect","options","rand","Math","floor","random","length","getSelOpt","_this2","map","index","val","key","onClick","ButtonSubmit","bttnType","name","disabled","bttnDisabled","sendQuery","bttnText","Form","selectOptions","data","isLoading","error","handleForm","query","fetch","then","response","ok","json","Error","catch","event","preventDefault","_this$state","onSubmit","components_InputField","components_SelectField","components_ButtonSubmit","message","hit","href","rel","src","width","alt","App","className","src_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2af6efb8.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass InputField extends Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state={\r\n      amount: 1\r\n    }\r\n\r\n    this.handleInput=this.handleInput.bind(this);\r\n  }\r\n  \r\n  handleInput(e) {\r\n    this.setState({\r\n      amount: e.target.value\r\n    });\r\n    this.props.getAmount(e.target.value);\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <input \r\n        type={this.props.inputType} \r\n        min={this.props.minVal} \r\n        max={this.props.maxVal}\r\n        defaultValue={this.props.minVal}\r\n        onChange={this.handleInput}\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\nexport default InputField;","import React, { Component } from 'react';\r\n\r\nclass SelectField  extends Component {\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state={\r\n      selectedOption: ''\r\n    }\r\n\r\n    this.handleSelect=this.handleSelect.bind(this);\r\n  }\r\n  \r\n  handleSelect(e) {\r\n    if(this.props.options[e.target.value] === 'random') {\r\n      let rand = Math.floor(Math.random()*(this.props.options.length-1));\r\n      this.setState({\r\n        selectedOption: this.props.options[rand]\r\n      })\r\n      this.props.getSelOpt(this.props.options[rand]);\r\n    }\r\n    else {\r\n      this.setState({\r\n        selectedOption: this.props.options[e.target.value]\r\n      })\r\n      this.props.getSelOpt(this.props.options[e.target.value]);\r\n    }\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <select defaultValue={this.props.options[0]} \r\n        onChange={this.handleSelect} \r\n      >\r\n        {this.props.options.map( (index, val) => {\r\n        return  <option key={val} value={val} onClick={this.handleSelect}>\r\n                  {index}\r\n                </option>\r\n        })}\r\n      </select>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SelectField;","import React from 'react';\r\n\r\nconst ButtonSubmit = (props) => {\r\n  \r\n  return (\r\n    <button type={props.bttnType}\r\n      name={props.bttnType} \r\n      disabled={props.bttnDisabled}\r\n      onClick={props.sendQuery}\r\n    >\r\n      {props.bttnText}\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default ButtonSubmit;","import React, { Component } from 'react';\r\nimport InputField from './components/InputField';\r\nimport SelectField from './components/SelectField';\r\nimport ButtonSubmit from './components/ButtonSubmit';\r\n\r\nconst API = 'http://shibe.online/api/';\r\n\r\nclass Form extends Component {\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state={\r\n      selectOptions: ['shibes','cats','birds','random'],\r\n      selectedOption: 'shibes',\r\n      amount: 1,\r\n      data: [],\r\n      isLoading: false,\r\n      error: null\r\n    }\r\n\r\n    this.handleForm = this.handleForm.bind(this);\r\n    this.query = this.query.bind(this);\r\n  }\r\n\r\n  query() {\r\n      this.setState({\r\n        isLoading: true\r\n      })\r\n      fetch(API + this.state.selectedOption + \"?count=\" + this.state.amount)\r\n      .then(response => {\r\n        this.setState({\r\n          isLoading: false\r\n        })\r\n        if (response.ok) {\r\n          //console.log('ok',response);\r\n          return response.json();\r\n        } else {\r\n         // console.log('err',response);\r\n          throw new Error('Something went wrong ...');\r\n        }\r\n      })\r\n        .then(data => this.setState({\r\n          data\r\n        }))\r\n        .catch(error => this.setState({\r\n          error, \r\n          isLoading: false\r\n        }));\r\n        //console.log('this.state.error',this.state.error);\r\n  }\r\n\r\n  getSelOpt = val => {\r\n    this.setState({\r\n      selectedOption: val\r\n    })\r\n  }\r\n\r\n  getAmount = val => {\r\n    this.setState({\r\n      amount: val\r\n    })\r\n  }\r\n\r\n  handleForm(event) {\r\n    event.preventDefault();\r\n  }\r\n\r\n  render(){\r\n    const { error, data, isLoading } = this.state;\r\n\r\n    return (\r\n      <div>\r\n      <form onSubmit={this.handleForm}>\r\n\r\n        <InputField \r\n          inputType=\"number\" \r\n          minVal={1} \r\n          maxVal={10}\r\n          getAmount={this.getAmount}\r\n        />\r\n\r\n        <SelectField \r\n          options={this.state.selectOptions}\r\n          getSelOpt={this.getSelOpt}/>\r\n\r\n        <ButtonSubmit\r\n          bttnType='submit' \r\n          bttnText={isLoading ? 'Loading...' : 'Submit'} \r\n          bttnDisabled={isLoading ? 'disabled' : ''}\r\n          sendQuery={this.query}\r\n        />\r\n      </form>\r\n      <ul>\r\n      {error && <p>{error.message}</p>}\r\n      {data.map(hit =>\r\n          <li key={hit}>\r\n            <a href={hit} target=\"_blank\" rel=\"noopener noreferrer\"><img src={hit} width=\"200px\" alt={hit}/></a>\r\n          </li>\r\n        )}\r\n      </ul>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Form;","import React, { Component } from 'react';\r\nimport Form from './Form.js';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Form/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}